#!/bin/sh

# shellcheck shell=dash

# Usage: mqtt-grep-color -e expr -h host -d -t topic  othermosquittoopts
# subscribe to the MQTT "topic" (Default: #) and colorize it, optionally grepping for "expr"

# shellcheck shell=ash        # prefer ash, since it is preferred on OpenWrt

# License: GNU General Public License v3.0
# For more information see project "mqtt-grep-color" on GitHub.

set -o noglob     # file name globbing is neither needed or nor wanted
set -o noclobber  # disable for security reasons

### prepare settings and helpers such as stdbuf ###

scriptname="${0##*/}"
stdbufcmd=""
stdbufcmd_tr=$( command -v stdbuf ) && stdbufcmd_tr="$stdbufcmd_tr --output=L" # use stdbuf for tr if it is available
grepexp=""

# color definitions derived from https://askubuntu.com/questions/1042234/modifying-the-color-of-grep :
grey="mt=01;30"; red="mt=01;31"; green="mt=01;32"; yellow="mt=01;33"; iyellow="mt=01;93" ; 
blue="mt=01;34" ; purple="mt=01;35" ; cyan="mt=01;36" ; white="mt=01;37"

# other settings for BusyBox grep - since it cannot colorize. And the option line-buffered is also missing.
{ grep --help 2>&1 | grep -q BusyBox ; } && BUSYBOX="yes" && stdbufcmd="$stdbufcmd_tr" # ... and stdbuf also for grep if on BusyBox

cRemoveUnwantedChars() {  tr -d ')("^%$ \r\000-\011\013-\037' ; }
cEchoErr() { echo "$scriptname: $*" 1>&2 ; }
alias ifDebug='[ "$bVerbose" ]'

if [ "$BUSYBOX" ] ; then # I'm on BusyBox
    ### grepexp="^ *$|[\}{ ]|\[\]|\[\{|\}\]" # { must be escaped
    # colorizes  }{, etc. if no other grep expression given; space must be there!
    [ "$stdbufcmd_tr" ] || cEchoErr "Warning: Install stdbuf for better line buffering! (Package coreutils-stdbuf on OpenWrt)"
else # Not on BusyBox
    ### grepexp="^ *$|[\}{ ]|\[\]|\[{|\}\]"  # { must NOT be escaped
    # grepexp="$grepexp| PNG"
    GREPOPTS="--text ${NO_COLOR:---color=always} --line-buffered"
    [ "$stdbufcmd_tr" ] || cEchoErr "Warning: Please install stdbuf for better line buffering!"
fi

cCmv()	{ command -v "$@" > /dev/null ; } # return true if a command exists

cCmv mosquitto_sub || { cEchoErr "Error: Install mosquitto_sub first, e.g. from package mosquitto-client-nossl" ; exit 1 ; }
cCmv gawk          || { cEchoErr "Error: Install gawk first, e.g. from package gawk" ; exit 1 ; }

mqtthost=""
noretained="-v"   # use "-v" to make sure $noretained is not an empty option
maxcount="-v"     # use "-v" to make sure $maxcount   is not an empty option
messageTimeOut="-v" # use "-v" to make sure $messageTimeOut   is not an empty option
awkTimeFormat="%H%M%S"
awkTimeLen=6           # for "mm:ss"
awkDeltaTime=0            # default is wallclock time, not delta time
jsonppcmd="cat" # default is no pretty printing (=cat)

### process command line options ###

while getopts "?e:h:t:T:f:p:W:RDl:C:SrsconF:Pxv-" opt
do
    case "$opt" in
    \?) cEchoErr "Usage: $scriptname -e expr -h mqtt_host -t topic1 -T topic2 -o -e grepexp -p port -P  --  othermosquittoopts
    Special options: -o(ptimize JSON), -D(elete retained msges), -R(dont list retained), -W MQTT_ timeout, -l minTopicChars, 
    -C maxmsgcount, -s suppress attrs, -P(retty print JSON), -r(emove JSON key quotes), -n(o color), -c(omment line), 
    -v(erbose), -f inputfile, -x(debug output)"
        exit 1
        ;;
    e)  grepexp="$OPTARG"
		;;
    h)  # set the MQTT broker host here or in $HOME/.config/mosquitto_sub
        case "$OPTARG" in     # see http://www.steves-internet-guide.com/mqtt-hosting-brokers-and-servers/
            test|mosquitto) mqtthost="test.mosquitto.org" ;;
            eclipse)        mqtthost="mqtt.eclipseprojects.io"  ;;
            iot)        mqtthost="iot.eclipse.org"  ;;
            mosca)      mqtthost="test.mosca.io"  ;;
            hivemq)         mqtthost="broker.hivemq.com"  ;;
            emqx)	        mqtthost="broker.emqx.io"   ;;
    		dash)           mqtthost="broker.mqttdashboard.com"    ;; # https://moxd.io/2015/10/17/public-mqtt-brokers/
            *)              mqtthost="$( echo "$OPTARG" | cRemoveUnwantedChars )" ;; # clean up for sec purposes
		esac
        ifDebug && { host $mqtthost || nslookup $mqtthost ; ping -4 -c 1 $mqtthost ; ping -6 -c 1 $mqtthost ; }
        # ... used for checking: for h in test eclipse iot mosca hivemq emqx dash ; do echo ==== $h ==== ; mqtt-grep-color -W 3 -C 1 -v -h $h ; done
        ;;
    t|T) case "$OPTARG" in
            \*|/) cEchoErr "Note: Replacing topic \"$OPTARG\" by \# ..." 
                OPTARG=\# ;;
            */) OPTARG="$OPTARG#" ;; # implicitly add the MQTT wildcard hashtag to any trailing "/" 
            *\#) : ;;  # ok as is
            *+*) : ;;  # ok as is
            *)   cEchoErr "Warning: Option -$opt \"$OPTARG\" has no trailing / or \#, i.e. is not a wildcard topic" ;; 
        esac
        topics="$topics -$opt $OPTARG" 
        ;;
    f)  inputfile="$OPTARG"
        ;;
    p)  port="$OPTARG"
        ;;
    W)  messageTimeOut="-W $OPTARG"
        ;;
    R)  noretained="-R"
        ;;
    D)  bRemoveRetained=1 # ... and will continue with streaming after removing the retained messages...
        ;;
    l)  awkMinTopicChars="$( echo "$OPTARG" | cRemoveUnwantedChars )" # minimum length of outputted topic string (padded with spaces)
        ;;
    C)  maxcount="-C $( echo "$OPTARG" | cRemoveUnwantedChars )" # clean arg for sec purposes
        ;;
    n)  noColor=1
        ;;
    c)  awkAdditionalSkipLines=1
        ;;
    F) # highlight certain prefixes of MQTT topics (multiple)
        awkHightlightPreFixes="$( echo "$OPTARG" | cRemoveUnwantedChars )"
        ;;
    P)  # try to pretty print any JSON payload
        cCmv json_pp && jsonppcmd=json_pp || cEchoErr "Warning: json_pp not found..."
        ;;
    r)  awkRemoveKeyQuotes=1
        ;;
    s)  sSuppressAttrs="$sSuppressAttrs $( echo "$OPTARG" | tr -d -c "A-Za-z0-9_")" # JSON attrs that will be tried to be eliminated
        ;;
    S)  awkTimeFormat="%s"
        awkTimeLen=3 # only the last three digits (len of %s is 11)
        awkDeltaTime=1
        ;;
    o)  [ "$awkOptimizeJSON" ] && awkOptimizeJSON=2 || awkOptimizeJSON=1 # 0=none, 1=more, 2=less
        ;;
    x)  set -x # turn on shell debugging from here on
        ;;
    v)  bVerbose="yes" # still mostly unused...
        ;;
    -)  echo "option -$opt not supported. Exiting." ; exit 1
        ;;
    esac
done

shift "$((OPTIND-1))"   # Discard options processed by getopts, any remaining options will be passed to mosquitto_sub

if [ -z "$topics" ] ; then
    [ "$bRemoveRetained" ] && { cEchoErr "Retained topics to be removed must be given explicitly with option -t. Exiting." ; exit 1 ; }
    topics="-t #"         # use '#' as default MQTT topic if nothing else given
fi

noColor="${noColor:-$NO_COLOR}" # if not set, use the global setting

# These are the basic steps for processing the MQTT stream:
# 1. remove any non-printable stuff from the data,
# 2. color the MQTT topic red,
# 3. put the time in front and color it yellow,
# 4. color the optional grep expression or curly brackets etc by default.
# N.B. the ugly hack with XXendofredXX is used to mark a typical MQTT topic for further grepping!
# N.B. a space at the end of the line makes sure that everything goes through, unless grepexp ist set specifically.

if [ -n "$inputfile" ] ; then
    cat "$inputfile"
else
    _ms_options="${mqtthost:+-h $mqtthost} ${port:+-p $port} -v $topics $noretained $maxcount $messageTimeOut $*"
    if [ "$bRemoveRetained" ] ; then
        ifDebug && echo "Running: mosquitto_sub $_ms_options -W 1 --retained-only --remove-retained"
        mosquitto_sub $_ms_options -W 1 --retained-only --remove-retained 2>&1 | 
        awk -v topics="$topics" '
            BEGIN { print "=== Removing retained messages with topics: " topics " ===" ; count=0 } 
            /^Timed out/ { next } 
            { count++ ; print } 
            END   { print "=== Removed " count " retained messages. ===" }'
    fi
    ifDebug && cEchoErr "mosquitto_sub options: $_ms_options"
    mosquitto_sub $_ms_options
fi |
gawk -b -v timeLen="$awkTimeLen" -v timeFormat="$awkTimeFormat" -v deltaTime="$awkDeltaTime" -v verbose="$bVerbose" -v removeKeyQuotes="$awkRemoveKeyQuotes" \
      -v optimizeJSON="$awkOptimizeJSON" -v noColor="$noColor" -v additionalSkipLines="$awkAdditionalSkipLines" -v minTopicChars="${awkMinTopicChars:-1}" \
      -v hightlightPreFixes="$awkHightlightPreFixes" '
BEGIN       {   jqcmd="jq ."  ; # jqcmd="cat"
                # PROCINFO[jqcmd, "READ_TIMEOUT"] = 1000
                PROCINFO[jqcmd, "RETRY"] = 1
                # pngprefix=sprintf("%c%c%c%c%c%c%c%c", 0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A)
                pngprefix=sprintf("%c%c%c%c%c", 0x89, 0x50, 0x4E, 0x47, 0x0D) # reduced number of signature bytes as a workaround because of line split
                jpgprefix=sprintf("%c%c%c",   0xFF, 0xD8, 0xFF)         # shortened workaround for JPEG and JFIF
                t=systime()
                mintopicsize=3
                }
/^$/        {   next } # skip any empty line

function MAX(a,b) { return a > b ? a : b }

function compare(s1, s2, anypos) {
    usepos=0
    s2=s2 "/" # FIXME/TEST: Nicer if previous string is shorter than new string
    maxlen=MAX(length(s1), length(s2))
    for (i=1 ; i<=maxlen && substr(s1,i,1) == substr(s2,i,1) ; i++)  { 
        if (substr(s1,i,1)=="/") {
            usepos=i
        }
    }
    return anypos ? i : usepos
 }

function subsm(s1, s2) {
    message=gensub( s1, s2, "g", message)
 }

/^[.)(a-z\/A-Z0-9$&%;_+!-]{1,255} /  { # topics are assumed to have  a maximum length of 255, reduces amount of garbage (255 is max on OpenWrt)
                g="g"
                if ( isJSON && collectedMessage && noColor ) {
                    # print "*****" ; fflush() ; print collectedMessage #  jqcmd # | getline beauty ; print beauty ; system("sleep 1") ;
                    # ; fflush() ;
                    # close(jqcmd)
                    # print "*****"
                    # fflush() ;
                }
                isJSON=0
                match($0, /^[.)(a-z\/A-Z0-9$&%;_+!-]+/) # Attention: regexp must be the same as above and further down ib the grep for the red color
                topiclength=RLENGTH
                if (topiclength < oldTopicLength-3) { oldTopicLength=0 } # reset old topic length if too short
                    
                topic=sprintf("%-*.*s", MAX(minTopicChars,oldTopicLength), topiclength, $0)
                oldTopicLength=length(topic)
                # print "TOPIC=" topic
                firstslashpos=index(topic, "/")
                if (match(topic, /[^[:print:]]/)>0 || (imagedatatype != "" && firstslashpos==0 && topiclength<6) ) {
                    message=substr($0, topiclength+2, 40) "..."
                    topic="..skipping..." topic
                    isToSkip=1
                    collectedMessage=""
                } else {
                    message=substr($0, topiclength+2, 9999)
                    imagedatatype=match(message, "^" pngprefix ) ? "PNG" : ( match(message, "^" jpgprefix ) ? "JPEG" : "" )
                    isJSON=( index(message,"{") == 1 || index(message,"[") == 1)  # FIXME: check for "]" at message end, too
                    isToSkip=0
                    collectedMessage=message
                }
                # clean message (=remove non-printables) before printing:
                gsub( /[^[:print:]]/ , "", topic )
                gsub( /[^[:print:]]/ , "", message )
                if ( verbose ) { print "DEBUGMSG(" isJSON "," isToSkip "," optimizeJSON "): " message } ## FIXME

                if ( optimizeJSON ) {
                    if ( isJSON ) {                        
                        message=gensub( / *} *$/ , "}", g, message) # remove any white space around the JSON closing bracket:
                        message=gensub( /^ *{ */                        , "{"     ,   g, message)  # remove any spaces around the JSON opening bracket
                        message=gensub( /" *: *(null|")/              , "\":\\1",   g, message)  # remove any spaces around the JSON colon for text values or null
                        message=gensub( /" *:[ ]*(-?[0-9]*\.?[0-9]*)/ , "\":\\1",   g, message)  # remove any spaces around the JSON colon for numeric values
                        message=gensub( /(-?[0-9]+)\.([0-9])([0-9]*[1-9])?0*( *[,}])/, "\\1.\\2\\3\\4",g, message)  # remove all but a single trailing digit in a JSON numeric value
                        message=gensub( / *,  *"/                     ,  ",\"" ,    g, message)  # reduce spaces around any comma to at most one
                        # message=gensub( /":([0-9])(, *")/           , "\": \\1\\2", g, message) # pad any one-digit number with one space for better alignment across messages
                        message=gensub( /"Time" *:"[0-9T:-]*",/       , ""        , g, message)  # eliminate the first "Time" key/value but only if it is followed by a comma (=has further key(s))
                        if (!noColor) {
                            message=gensub( /"([a-zA-Z _]+)" *: *(\[?) *{/  , "\"XXcyanXX\\1XXcyanXX\":\\2{", g, message)  # highlight the name of a whole embedded object
                            message=gensub( /"([a-zA-Z _]+)" *: *(\[ *\])/  , "\"XXcyanXX\\1XXcyanXX\":\\2" , g, message)  # highlight the name of an empty array
                            message=gensub( /" *:( *)"([^"]+)"( *[,}]+)/  , "\":\\1\"XXwhiteXX\\2XXwhiteXX\"\\3" , g, message)  # highlight a quoted string value in JSON
                            message=gensub( /" *:( *)(null|-{0,1}([0-9]*[.]{0,1}[0-9]*))( *[,}]+)/   , "\":\\1XXyellowXX\\2XXyellowXX\\4 " , g, message)  # highlight a numeric value in JSON
                            gsub( /" *:( *)\[ *\]/   , "\":XXyellowXX[]XXyellowXX" , message)  # highlight and shorten empty arrays (brackets only)
                            if (removeKeyQuotes) {
                                message=gensub( /([,{] *)"([^"]+)"( *:)/            ,  "\\1XXnoneXX\\2XXnoneXX:" , g, message)  # highlight keys and remove double quotes around keys
                                message=gensub( /([,{] *)\\"([^\\"]+)\\" *:/      ,  "\\1*\\2*:" , g, message)  # modify escaping slashes for quotes around keys within messages: 
                                message=gensub( /: *\\"([^\\"]*)\\"()/      ,  ":*\\1*\\2" , g, message)  #  ... and for escaping slashes around values, too.
                                # { ..., payload {\"linkquality\":44, \"state\":\"OFF\",\"update\":{\"installed_version\":16909577, \"latest_version\":16909577, \"state\":\"idle\"},\"update_available\":false}"}
                            }
                        } 
                    } else {
                        gsub( /^\[0;3.m\[I\]/ , "" , message) # remove color garbage at beginning of message (e.g. from esphome)
                        gsub( /\[0m$/         , "" , message) # ... and color garbage at end of message 
                        gsub( /^-{0,1}[0-9]*[.]{0,1}[0-9]*$/, "XXyellowXX&XXyellowXX" , message) # ... and yellowfy a lonely number
                        gsub( /^[a-zA-Z]{1,5}$|^.nline$|^.ffline$|^ONLINE$|^OFFLINE$/, "XXyellowXX&XXyellowXX" , message) # ... or a short lonely word
                    }

                    gsub(/"act_t" *:/,             "\"action_topic\":", message)
                    gsub(/"act_tpl" *:/,           "\"action_template\":", message)
                    gsub(/"atype" *:/,             "\"automation_type\":", message)
                    gsub(/"aux_cmd_t" *:/,         "\"aux_command_topic\":", message)
                    gsub(/"aux_stat_tpl" *:/,      "\"aux_state_template\":", message)
                    gsub(/"aux_stat_t" *:/,        "\"aux_state_topic\":", message)
                    gsub(/"avty" *:/,              "\"availability\":", message)
                    gsub(/"avty_t" *:/,            "\"availability_topic\":", message)
                    gsub(/"away_mode_cmd_t" *:/,   "\"away_mode_command_topic\":", message)
                    gsub(/"away_mode_stat_tpl" *:/,"\"away_mode_state_template\":", message)
                    gsub(/"away_mode_stat_t" *:/,   "\"away_mode_state_topic\":", message)
                    gsub(/"b_tpl" *:/,              "\"blue_template\":", message)
                    gsub(/"bri_cmd_t" *:/,          "\"brightness_command_topic\":", message)
                    gsub(/"bri_scl" *:/,            "\"brightness_scale\":", message)
                    gsub(/"bri_stat_t" *:/,         "\"brightness_state_topic\":", message)
                    gsub(/"bri_tpl" *:/,            "\"brightness_template\":", message)
                    gsub(/"bri_val_tpl" *:/,        "\"brightness_value_template\":", message)
                    gsub(/"clr_temp_cmd_tpl" *:/,   "\"color_temp_command_template\":", message)
                    gsub(/"bat_lev_t" *:/,          "\"battery_level_topic\":", message)
                    gsub(/"bat_lev_tpl" *:/,        "\"battery_level_template\":", message)
                    gsub(/"chrg_t" *:/,             "\"charging_topic\":", message)
                    gsub(/"chrg_tpl" *:/,           "\"charging_template\":", message)
                    gsub(/"clr_temp_cmd_t" *:/,     "\"color_temp_command_topic\":", message)
                    gsub(/"clr_temp_stat_t" *:/,    "\"color_temp_state_topic\":", message)
                    gsub(/"clr_temp_tpl" *:/,       "\"color_temp_template\":", message)
                    gsub(/"clr_temp_val_tpl" *:/,   "\"color_temp_value_template\":", message)
                    gsub(/"cln_t" *:/,              "\"cleaning_topic\":", message)
                    gsub(/"cln_tpl" *:/,            "\"cleaning_template\":", message)
                    gsub(/"cmd_off_tpl" *:/,        "\"command_off_template\":", message)
                    gsub(/"cmd_on_tpl" *:/,         "\"command_on_template\":", message)
                    gsub(/"cmd_t" *:/,              "\"command_topic\":", message)
                    gsub(/"cmd_tpl" *:/,            "\"command_template\":", message)
                    gsub(/"cod_arm_req" *:/,        "\"code_arm_required\":", message)
                    gsub(/"cod_dis_req" *:/,        "\"code_disarm_required\":", message)
                    gsub(/"curr_temp_t" *:/,        "\"current_temperature_topic\":", message)
                    gsub(/"curr_temp_tpl" *:/,      "\"current_temperature_template\":", message)
                    gsub(/"dev" *:/,                "\"device\":", message)
                    gsub(/"dev_cla" *:/,            "\"device_class\":", message)
                    gsub(/"dock_t" *:/,             "\"docked_topic\":", message)
                    gsub(/"dock_tpl" *:/,           "\"docked_template\":", message)
                    gsub(/"err_t" *:/,              "\"error_topic\":", message)
                    gsub(/"err_tpl" *:/,            "\"error_template\":", message)
                    gsub(/"fanspd_t" *:/,           "\"fan_speed_topic\":", message)
                    gsub(/"fanspd_tpl" *:/,         "\"fan_speed_template\":", message)
                    gsub(/"fanspd_lst" *:/,         "\"fan_speed_list\":", message)
                    gsub(/"flsh_tlng" *:/,          "\"flash_time_long\":", message)
                    gsub(/"flsh_tsht" *:/,          "\"flash_time_short\":", message)
                    gsub(/"fx_cmd_t" *:/,           "\"effect_command_topic\":", message)
                    gsub(/"fx_list" *:/,            "\"effect_list\":", message)
                    gsub(/"fx_stat_t" *:/,          "\"effect_state_topic\":", message)
                    gsub(/"fx_tpl" *:/,             "\"effect_template\":", message)
                    gsub(/"fx_val_tpl" *:/,         "\"effect_value_template\":", message)
                    gsub(/"exp_aft" *:/,            "\"expire_after\":", message)
                    gsub(/"fan_mode_cmd_t" *:/,     "\"fan_mode_command_topic\":", message)
                    gsub(/"fan_mode_stat_tpl" *:/,  "\"fan_mode_state_template\":", message)
                    gsub(/"fan_mode_stat_t" *:/,    "\"fan_mode_state_topic\":", message)
                    gsub(/"frc_upd" *:/,            "\"force_update\":", message)
                    gsub(/"g_tpl" *:/,              "\"green_template\":", message)
                    gsub(/"hold_cmd_t" *:/,         "\"hold_command_topic\":", message)
                    gsub(/"hold_stat_tpl" *:/,      "\"hold_state_template\":", message)
                    gsub(/"hold_stat_t" *:/,        "\"hold_state_topic\":", message)
                    gsub(/"hs_cmd_t" *:/,           "\"hs_command_topic\":", message)
                    gsub(/"hs_stat_t" *:/,          "\"hs_state_topic\":", message)
                    gsub(/"hs_val_tpl" *:/,         "\"hs_value_template\":", message)
                    gsub(/"ic" *:/,                 "\"icon\":", message)
                    gsub(/"init" *:/,               "\"initial\":", message)
                    gsub(/"json_attr_t" *:/,        "\"json_attributes_topic\":", message)
                    gsub(/"json_attr_tpl" *:/,      "\"json_attributes_template\":", message)
                    gsub(/"max_mirs" *:/,           "\"max_mireds\":", message)
                    gsub(/"mf" *:/,                 "\"manufacturer\":", message) # inserted line upon observation from esphome
                    gsub(/"min_mirs" *:/,           "\"min_mireds\":", message)
                    gsub(/"max_temp" *:/,           "\"max_temp\":", message)
                    gsub(/"min_temp" *:/,           "\"min_temp\":", message)
                    gsub(/"mode_cmd_t" *:/,         "\"mode_command_topic\":", message)
                    gsub(/"mode_stat_tpl" *:/,      "\"mode_state_template\":", message)
                    gsub(/"mode_stat_t" *:/,        "\"mode_state_topic\":", message)
                    gsub(/"name" *:/,               "\"name\":", message)
                    gsub(/"off_dly" *:/,            "\"off_delay\":", message)
                    gsub(/"on_cmd_type" *:/,        "\"on_command_type\":", message)
                    gsub(/"opt" *:/,                "\"optimistic\":", message)
                    gsub(/"osc_cmd_t" *:/,          "\"oscillation_command_topic\":", message)
                    gsub(/"osc_stat_t" *:/,         "\"oscillation_state_topic\":", message)
                    gsub(/"osc_val_tpl" *:/,        "\"oscillation_value_template\":", message)
                    gsub(/"pl" *:/,                 "\"payload\":", message)
                    gsub(/"pl_arm_away" *:/,        "\"payload_arm_away\":", message)
                    gsub(/"pl_arm_home" *:/,        "\"payload_arm_home\":", message)
                    gsub(/"pl_arm_custom_b" *:/,    "\"payload_arm_custom_bypass\":", message)
                    gsub(/"pl_arm_nite" *:/,        "\"payload_arm_night\":", message)
                    gsub(/"pl_avail" *:/,           "\"payload_available\":", message)
                    gsub(/"pl_cln_sp" *:/,          "\"payload_clean_spot\":", message)
                    gsub(/"pl_cls" *:/,             "\"payload_close\":", message)
                    gsub(/"pl_disarm" *:/,          "\"payload_disarm\":", message)
                    gsub(/"pl_hi_spd" *:/,          "\"payload_high_speed\":", message)
                    gsub(/"pl_home" *:/,            "\"payload_home\":", message)
                    gsub(/"pl_lock" *:/,            "\"payload_lock\":", message)
                    gsub(/"pl_loc" *:/,             "\"payload_locate\":", message)
                    gsub(/"pl_lo_spd" *:/,          "\"payload_low_speed\":", message)
                    gsub(/"pl_med_spd" *:/,         "\"payload_medium_speed\":", message)
                    gsub(/"pl_not_avail" *:/,       "\"payload_not_available\":", message)
                    gsub(/"pl_not_home" *:/,        "\"payload_not_home\":", message)
                    gsub(/"pl_off" *:/,             "\"payload_off\":", message)
                    gsub(/"pl_off_spd" *:/,         "\"payload_off_speed\":", message)
                    gsub(/"pl_on" *:/,              "\"payload_on\":", message)
                    gsub(/"pl_open" *:/,            "\"payload_open\":", message)
                    gsub(/"pl_osc_off" *:/,         "\"payload_oscillation_off\":", message)
                    gsub(/"pl_osc_on" *:/,          "\"payload_oscillation_on\":", message)
                    gsub(/"pl_paus" *:/,            "\"payload_pause\":", message)
                    gsub(/"pl_stop" *:/,            "\"payload_stop\":", message)
                    gsub(/"pl_strt" *:/,            "\"payload_start\":", message)
                    gsub(/"pl_stpa" *:/,            "\"payload_start_pause\":", message)
                    gsub(/"pl_ret" *:/,             "\"payload_return_to_base\":", message)
                    gsub(/"pl_toff" *:/,            "\"payload_turn_off\":", message)
                    gsub(/"pl_ton" *:/,             "\"payload_turn_on\":", message)
                    gsub(/"pl_unlk" *:/,            "\"payload_unlock\":", message)
                    gsub(/"pos_clsd" *:/,           "\"position_closed\":", message)
                    gsub(/"pos_open" *:/,           "\"position_open\":", message)
                    gsub(/"pow_cmd_t" *:/,          "\"power_command_topic\":", message)
                    gsub(/"pow_stat_t" *:/,         "\"power_state_topic\":", message)
                    gsub(/"pow_stat_tpl" *:/,       "\"power_state_template\":", message)
                    gsub(/"r_tpl" *:/,              "\"red_template\":", message)
                    gsub(/"ret" *:/,                "\"retain\":", message)
                    gsub(/"rgb_cmd_tpl" *:/,        "\"rgb_command_template\":", message)
                    gsub(/"rgb_cmd_t" *:/,          "\"rgb_command_topic\":", message)
                    gsub(/"rgb_stat_t" *:/,         "\"rgb_state_topic\":", message)
                    gsub(/"rgb_val_tpl" *:/,        "\"rgb_value_template\":", message)
                    gsub(/"send_cmd_t" *:/,         "\"send_command_topic\":", message)
                    gsub(/"send_if_off" *:/,        "\"send_if_off\":", message)
                    gsub(/"set_fan_spd_t" *:/,      "\"set_fan_speed_topic\":", message)
                    gsub(/"set_pos_tpl" *:/,        "\"set_position_template\":", message)
                    gsub(/"set_pos_t" *:/,          "\"set_position_topic\":", message)
                    gsub(/"pos_t" *:/,              "\"position_topic\":", message)
                    gsub(/"spd_cmd_t" *:/,          "\"speed_command_topic\":", message)
                    gsub(/"spd_stat_t" *:/,         "\"speed_state_topic\":", message)
                    gsub(/"spd_val_tpl" *:/,        "\"speed_value_template\":", message)
                    gsub(/"spds" *:/,               "\"speeds\":", message)
                    gsub(/"src_type" *:/,           "\"source_type\":", message)
                    gsub(/"stat_clsd" *:/,          "\"state_closed\":", message)
                    gsub(/"stat_closing" *:/,       "\"state_closing\":", message)
                    gsub(/"stat_off" *:/,           "\"state_off\":", message)
                    gsub(/"stat_on" *:/,            "\"state_on\":", message)
                    gsub(/"stat_open" *:/,          "\"state_open\":", message)
                    gsub(/"stat_opening" *:/,       "\"state_opening\":", message)
                    gsub(/"stat_locked" *:/,        "\"state_locked\":", message)
                    gsub(/"stat_unlocked" *:/,      "\"state_unlocked\":", message)
                    gsub(/"stat_t" *:/,             "\"state_topic\":", message)
                    gsub(/"stat_tpl" *:/,           "\"state_template\":", message)
                    gsub(/"stat_val_tpl" *:/,       "\"state_value_template\":", message)
                    gsub(/"stype" *:/,              "\"subtype\":", message)
                    gsub(/"sup_feat" *:/,           "\"supported_features\":", message)
                    gsub(/"swing_mode_cmd_t" *:/,   "\"swing_mode_command_topic\":", message)
                    gsub(/"swing_mode_stat_tpl" *:/,"\"swing_mode_state_template\":", message)
                    gsub(/"swing_mode_stat_t" *:/,  "\"swing_mode_state_topic\":", message)
                    gsub(/"temp_cmd_t" *:/,         "\"temperature_command_topic\":", message)
                    gsub(/"temp_hi_cmd_t" *:/,      "\"temperature_high_command_topic\":", message)
                    gsub(/"temp_hi_stat_tpl" *:/,   "\"temperature_high_state_template\":", message)
                    gsub(/"temp_hi_stat_t" *:/,     "\"temperature_high_state_topic\":", message)
                    gsub(/"temp_lo_cmd_t" *:/,      "\"temperature_low_command_topic\":", message)
                    gsub(/"temp_lo_stat_tpl" *:/,   "\"temperature_low_state_template\":", message)
                    gsub(/"temp_lo_stat_t" *:/,     "\"temperature_low_state_topic\":", message)
                    gsub(/"temp_stat_tpl" *:/,      "\"temperature_state_template\":", message)
                    gsub(/"temp_stat_t" *:/,        "\"temperature_state_topic\":", message)
                    gsub(/"temp_unit" *:/,          "\"temperature_unit\":", message)
                    gsub(/"tilt_clsd_val" *:/,      "\"tilt_closed_value\":", message)
                    gsub(/"tilt_cmd_t" *:/,         "\"tilt_command_topic\":", message)
                    gsub(/"tilt_inv_stat" *:/,      "\"tilt_invert_state\":", message)
                    gsub(/"tilt_max" *:/,           "\"tilt_max\":", message)
                    gsub(/"tilt_min" *:/,           "\"tilt_min\":", message)
                    gsub(/"tilt_opnd_val" *:/,      "\"tilt_opened_value\":", message)
                    gsub(/"tilt_opt" *:/,           "\"tilt_optimistic\":", message)
                    gsub(/"tilt_status_t" *:/,      "\"tilt_status_topic\":", message)
                    gsub(/"tilt_status_tpl" *:/,    "\"tilt_status_template\":", message)
                    gsub(/"t" *:/,                  "\"topic\":", message)
                    gsub(/"uniq_id" *:/,            "\"unique_id\":", message)
                    gsub(/"unit_of_meas" *:/,       "\"unit_of_measurement\":", message)
                    gsub(/"val_tpl" *:/,            "\"value_template\":", message)
                    gsub(/"whit_val_cmd_t" *:/,     "\"white_value_command_topic\":", message)
                    gsub(/"whit_val_scl" *:/,       "\"white_value_scale\":", message)
                    gsub(/"whit_val_stat_t" *:/,    "\"white_value_state_topic\":", message)
                    gsub(/"whit_val_tpl" *:/,       "\"white_value_template\":", message)
                    gsub(/"xy_cmd_t" *:/,           "\"xy_command_topic\":", message)
                    gsub(/"xy_stat_t" *:/,          "\"xy_state_topic\":", message)
                    gsub(/"xy_val_tpl" *:/,         "\"xy_value_template\":", message)
                    } else {
                        # works but output not pretty:
                        # message=gensub( /^([[:alnum:]]+)$/ , "XXwhiteXX\\1XXwhiteXX", g, message)  # highlight a simple (one-word) string
                    }
                    # print imagedatatype "##" limitpos "##" topic "##"message"##"
                    timeVal=systime() - (deltaTime ? t : 0)
                    msgtime = "00000000000000" strftime(timeFormat, timeVal)
                    msgtime = substr( msgtime, length(msgtime)-timeLen +1)
                    if ( imagedatatype != "" ) {
                        message="<BINARY FORMAT: " imagedatatype ">"
                    }
                    if (noColor) {
                        printf "%s %s  %s\n", msgtime , topic, message
                    } else {
                        timediff=msgtime-prevmsgtime
                        if (optimizeJSON) {
                            cTopic=compare(topic,prevtopic, 1==0)
                            if (cTopic==0) {
                                topicdiff=0
                            } else if (length(prevtopic)!=length(topic)) {
                                topicdiff=length(prevtopic)-length(topic) 
                                topicdiff= (topicdiff<0) ? 0 : (topicdiff>2) ? 1 : topicdiff
                            }
                            prevtopic=topic # save topic content for the next message
                        }
                        if (topiclength>7 || firstslashpos>0 || timediff>0) { # if a (1) longer topic, (2.) with slashes, (3.) not at the same time - probably a topic
                            firstgreypos=1
                            # if topic beginning matches hightlightPreFixes, set firstgreypos to the end of the prefix
                            # if (length(hightlightPreFixes)>0 && index(topic,hightlightPreFixes)==1  ) {
                            if (length(hightlightPreFixes)>0 && match(topic,hightlightPreFixes)>0  ) {
                                firstgreypos=RLENGTH+1
                                topic="XXbeginofpurpleXX" substr(topic,1,firstgreypos-1) "XXendofpurpleXX" "XXbeginofgreyXX" substr(topic,firstgreypos,cTopic-firstgreypos+1) "XXendofgreyXX" "XXbeginofredXX" substr(topic, MAX(cTopic+1,firstgreypos),999) "XXendofredXX" substr("   ",1,topicdiff)
                            } else {
                                topic="XXbeginofgreyXX" substr(topic,firstgreypos,cTopic) "XXendofgreyXX" "XXbeginofredXX" substr(topic, cTopic+1,999) "XXendofredXX" substr("   ",1,topicdiff)
                            }
                        } else {
                            # print "TOPIC " topic " is too short or has no slashes or is at the same time as the previous one. Skipping."
                            # --> leave topic as is
                        }
                        cTime=(timediff==0) ? length(msgtime) : ( timediff<2 ? length(msgtime)-1 : 0 )
                        printf "%s %s %s \n" , substr(msgtime,1,cTime) "XXcol1timeXX" substr(msgtime,cTime+1,99) "XXcol1timeXX" , topic, message
                    }
                    prevmsgtime=msgtime
                    fflush()
                    next
                }
                { # print printable characters of all other lines, but skip the binary data of images:
                    if ( (imagedatatype == "") && ! (additionalSkipLines == "1") ) {
                        gsub( /[^[:print:]]/ , "" )
                        printf "%s \n", $0 
                        if (isJSON) { collectedMessage=collectedMessage " " $0 }
                        fflush()
                    }
                } '    \
| if [ -z "$noColor" ] ; then
      # regexp for topic must be the same as above:                                 [.)(a-z\/A-Z0-9$&%;_+!-]
      GREP_COLORS="$red"     $stdbufcmd  grep $GREPOPTS -E -e "^" -e 'XXbeginofredXX[.)(/ a-zA-Z0-9$&%;_+!-]+XXendofredXX'    \
    | GREP_COLORS="$purple"  $stdbufcmd  grep $GREPOPTS -E -e "^" -e 'XXbeginofpurpleXXhomeassistant/[.)(/a-zA-Z0-9$&%;_+-]+XXendofpurpleXX'    \
    | GREP_COLORS="$purple"  $stdbufcmd  grep $GREPOPTS -E -e "^" -e 'XXbeginofpurpleXX[./a-zA-Z0-9_+-]+XXendofpurpleXX'    \
    | GREP_COLORS="$purple"  $stdbufcmd  grep $GREPOPTS -E -e "^" -e '\$[a-z]+XXendofredXX'   \
    | GREP_COLORS="$yellow"  $stdbufcmd  grep $GREPOPTS -E -e "^" -e 'XXcol1timeXX[0-9:]+XXcol1timeXX|XXyellowXX[^X]+XXyellowXX'   \
    | { [ -z "$grepexp" ] && cat || GREP_COLORS="$green" $stdbufcmd grep $GREPOPTS -E        -e "$grepexp" ; }   \
    | GREP_COLORS="$blue"    $stdbufcmd  grep $GREPOPTS -E -e "^" -e 'nomorexxxxxxxx,'       \
    | GREP_COLORS="$grey"    $stdbufcmd  grep $GREPOPTS -E -e "^" -e ' \{|,|\} *$|XXgreyXX[^X]+XXgreyXX'        \
    | GREP_COLORS="$white"   $stdbufcmd  grep $GREPOPTS -E -e "^" -e 'XXwhiteXX[^X]+XXwhiteXX'       \
    | GREP_COLORS="$cyan"    $stdbufcmd  grep $GREPOPTS -E -e "^" -e 'XXcyanXX[^:]+XXcyanXX'       \
    | { awk -- '{ gsub( "XXcol1timeXX|XXbeginofgreyXX|XXendofgreyXX|XXbeginofredXX|XXendofredXX|XXbeginofpurpleXX|XXendofpurpleXX|XXwhiteXX|XXcyanXX|XXyellowXX|XXnoneXX" , "" ); print }' ;} \
    ;
else
    cat
fi